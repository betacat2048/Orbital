#include <iostream>
#include <chrono>
#include <string>
#include <math.h>
#include <vector>
#include <tuple>
#include <string>

#include <functional>
#include <random>
#include <memory>

#include <Eigen/Dense>

#include <boost/math/tools/roots.hpp>
#include <boost/math/constants/constants.hpp>
#include <boost/math/special_functions/next.hpp> // For float_distance.
#include <boost/math/special_functions/cbrt.hpp> // For boost::math::cbrt.

#include "space.h"
#include "cspice.h"

#include "kepler.h"

#ifdef _DEBUG

#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>

#endif // _DEBUG

// CSPICE
#include <cspice/SpiceUsr.h>
#pragma comment(lib, "cspice.lib")
#pragma comment(lib, "csupport.lib")

using namespace orbital;

boost::uintmax_t it = 0;

value_t mean2elliptic(value_t M, value_t e = 0) {
	using namespace boost::math::tools;
	using namespace boost::math::long_double_constants;

	/**
	static constexpr size_t ord = 4, sep = 2;
	static constexpr double coeff_table[sep][sep][ord][ord] ={
		{
			{{0.04166516827561763,0.8330431271094522,0.1722595017809713,-0.0512436841509584},{-0.39306840991952485,2.590158329496205,-1.6271521446909338,0.3162169310255297},{0.21078887785603048,0.1757065454713379,0,0},{1.053304986444104,-1.3445384837578394,0,0}},
			{{-0.22620954564205367,1.2388268604279764,-0.07855956691546745,0.007875849079899262},{1.4670383987121736,0.26743130438363627,-0.35518486516654046,0.04133280010717042},{-0.7974652145971981,0.17811523691315462,0,0},{-0.14312733691997792,0.1055547642182855,0,0}}
		},
		{
			{{0.14773937640632193,2.0095026569056977,-1.3958387761690103,0.3167025148523204},{-2.818866021301129,3.3662131835737954,0.09053151243179873,0.05987348942751839},{5.745378579921496,-5.251974444195626,0,0},{-2.3783317558608275,2.0494980426603338,0,0}},
			{{-0.7689301689443863,1.8452756142369147,-0.29436149916125487,0.032789074547786984},{2.8851478866383804,-1.2517923635029544,0.1654775836612348,-0.018478540146222466},{-1.2097952940529177,0.37895669946746885,0,0},{0.2703121247236524,-0.08315027581461518,0,0}}
		}
	};

	/**/

	static constexpr size_t ord = 4, sep = 4;
	static constexpr double coeff_table[sep][sep][ord][ord] = {
		{
			{{0.0012483724733875108,0.9919878118056848,0.006149946950965943,0.006578841938249232},{-0.022883739996147567,1.1529903788513847,-0.1202373609996659,-0.28993373637520525},{0.021215556489776244,0.7526349352843683,0,0},{0.30431638285518403,-0.00933712668366061,0,0}},
			{{0.020646259483659196,0.9521140613846486,0.036217197730783864,-0.008950507344668516},{-0.5054256670952778,2.2071370086286266,-0.9766347269551157,0.1144527613079234},{1.2720594079149574,-0.7804562894045538,0,0},{0.3116532590757686,-0.5959017641841649,0,0}},
			{{-0.022166190097144753,1.017077294128553,0.0000207908813922332,-0.0014733691939240075},{-0.21811256544131274,1.969830927823781,-0.924895270621506,0.11026164664371796},{0.9371058621841328,-0.6573052339780364,0,0},{-1.8523632166296125,0.9071052308812606,0,0}},
			{{-0.1146260796510516,1.1121659198196796,-0.03596560945771693,0.0037680554728151375},{0.9689065172016842,0.992372337847656,-0.6219400052486344,0.06645139163864858},{-2.214910909754668,0.6905491325877181,0,0},{1.0657430115338329,-0.3216442616688267,0,0}}
		},
		{
			{{0.031583110329208776,0.6439824888617103,0.6800855210028967,-0.21082421913396018},{0.047247689731879323,1.9382759319186547,-2.4760618348724877,0.38807568908689544},{-0.9545812241913492,3.2483068817149663,0,0},{1.483799194027057,-2.9886706499296016,0,0}},
			{{0.0194146027514068,0.922611226868551,0.11306618409974681,-0.05117180551860956},{-0.833643396948283,2.769361153412463,-1.4659527577649976,0.3236052952357645},{2.599550809142773,-1.9060047538126565,0,0},{-1.5557899800596147,0.9540281219658374,0,0}},
			{{-0.43650643524061417,1.5100695367543562,-0.18497934472122718,0.019599657448064273},{1.6291201167523852,-0.08365482443052791,-0.1963937336976986,0.030292148296292138},{-0.08900030564526762,-0.19505668243520422,0,0},{-0.44849162003805537,0.281563765695012,0,0}},
			{{-0.5591140284047698,1.5568114717372454,-0.18124078630429222,0.0192698778847371},{2.8872758390878133,-0.95611264135501,0.01813442143320876,-0.0017684065866897685},{-1.9407074764709809,0.6125555287149658,0,0},{0.7083620307867307,-0.22207666073515198,0,0}}
		},
		{
			{{0.3180336715581032,-1.8762095659484803,6.9955250514442735,-4.695901343752972},{-0.2183503710677088,5.834666250922318,-14.835442273828475,9.058519150379933},{-2.0160004625920678,6.8174318884810585,0,0},{2.3989552535228995,-5.813252231025009,0,0}},
			{{-0.6230305634474702,2.1328343879447544,-0.6664836604658182,0.11001460717096762},{0.7969897238084476,0.19335312337787613,0.0891375973780039,0.004730842095018619},{1.6390738579025808,-1.5034271621932869,0,0},{-0.9967529526635985,0.7515570084601072,0,0}},
			{{-0.8224133118952164,1.9700462654153261,-0.36831380715942147,0.044760088138723605},{2.695140122320007,-1.175424877058799,0.18669470288099577,-0.022162469811238827},{-0.902909060778665,0.2117823356851715,0,0},{0.12595829172659023,-0.004038929971444524,0,0}},
			{{-0.6815950970783535,1.7037768301190974,-0.23323336942022752,0.024896707568770885},{3.013053632549016,-1.227993834971784,0.12916664275311787,-0.013780103788454828},{-1.5140621757665629,0.48061804683084386,0,0},{0.418275237899401,-0.13248304012216866,0,0}}
		},
		{
			{{2.733370440900174,-0.48385814709854813,-8.79748004250742,4.627396864793672},{-12.754803840501632,21.62895816101012,5.130211660399395,-2.576743986245724},{16.71433051679349,-27.891001068334,0,0},{-6.1108922298169555,9.903741838837103,0,0}},
			{{-1.2537085158105907,2.9738333650630473,-1.0958241569611427,0.21048441809315052},{2.656995067607769,-1.6426638962350852,0.6880558005909847,-0.1351228517178275},{-0.38779981578043277,-0.1359471871209349,0,0},{-0.07562358632185351,0.1318657517371867,0,0}},
			{{-0.8853718908234034,2.044680997290272,-0.3950356450329936,0.04908502266073675},{2.862669039710872,-1.340163637770135,0.22596349026998525,-0.02843623870455387},{-1.0644431946422337,0.3288213722533549,0,0},{0.2039869216193324,-0.059110614203664515,0,0}},
			{{-0.5921525240193959,1.6622583366888326,-0.22697501312344012,0.02425134336758735},{2.7119875798712347,-1.1172353535137067,0.12172283771153794,-0.013017192064757974},{-1.1421269496595683,0.3634661368045464,0,0},{0.25042089836834336,-0.07962647068411272,0,0}}
		}
	};

	if ( e >= 1 ) throw std::invalid_argument("e should less than 1");

	auto dm = remainder(M, two_pi);
	bool neg = dm < 0;
	value_t guess = 0., err = 1.;

	if ( neg ) dm = -dm;

	auto ie = static_cast<unsigned>( e / 1. * sep );
	if ( ie >= sep ) ie = sep - 1;
	auto im = static_cast<unsigned>( dm / pi * sep );
	if ( im >= sep ) im = sep - 1;

	//err = (im == 0) ? (ie == (sep - 1) ? 0.8 : 0.06) : 0.04;
	err = ( im == 0 ) ? ( ie == ( sep - 1 ) ? 0.65 : 0.045 ) : 0.002;

	const auto &coeff = coeff_table[ie][im];

	const auto dm2 = dm * dm;
	const auto dm3 = dm * dm2; sep;

	guess  //calculate the guess point of the solution
		= ( 1 * coeff[0][0] + dm * coeff[0][1] + dm2 * coeff[0][2] + dm3 * coeff[0][3] ) * 1
		+ ( 1 * coeff[1][0] + dm * coeff[1][1] + dm2 * coeff[1][2] + dm3 * coeff[1][3] ) * e
		+ ( 1 * coeff[2][0] + dm * coeff[2][1] ) * e * e
		+ ( 1 * coeff[3][0] + dm * coeff[3][1] ) * e * e * e;

	if ( neg )
		guess = M + dm - guess;
	else
		guess = M - dm + guess;

	boost::uintmax_t maxit = 64;
	auto res = halley_iterate(
		[&e, &M](const value_t &E) { auto esinE = e * sin(E);  return std::make_tuple(E - esinE - M, 1 - e * cos(E), esinE); },
		guess, guess - err, guess + err, static_cast<int>( std::numeric_limits<value_t>::digits ), maxit);

	it = maxit;
	return res;
}

using namespace Eigen;
using namespace std;

std::mt19937 gen(std::random_device{}( ));

class testclass : std::enable_shared_from_this<testclass> {
	using node_t = testclass;
	using ptr_t = std::shared_ptr<node_t>;
	int data;
	ptr_t prev;
	testclass(testclass &&) = default;
	testclass(const testclass &) = default;
	testclass &operator= (testclass &&) = default;
	testclass &operator= (const testclass &) = default;

	testclass(const ptr_t &prev, const int &data) :prev(prev), data(data) {}
public:


	static ptr_t make_node(const ptr_t &prev, const int &data) {
		return ptr_t(new testclass(prev, data));
	}
	static ptr_t make_node(const int &data) {
		return make_node(nullptr, data);
	}

	ptr_t make_child(const int &data) { return make_node(shared_from_this(), data); }

	int get_data() const { return data; }
	void set_data(int n) { data = n; }
};

void phase_test(value_t ct) {
	using namespace boost::math::long_double_constants;

	auto SSB = absolute_phase::frame::root();

	auto earthmoon_MeanOrbit = absolute_phase::dirct::make_node(
		SSB,
		relatively_phase::dirct(make_quaternion(-11.3 * ( pi / 180. ), vec3(0, 0, 1)) * make_quaternion(2.3 * ( pi / 180. ), vec3(1, 0, 0)))
	);

	auto earth_MeanEquator = earthmoon_MeanOrbit->make_next_node(
		relatively_phase::dirct(make_quaternion(1.35 * ( pi / 180. ), vec3(0, 0, 1)) * make_quaternion(23.4 * ( pi / 180. ), vec3(1, 0, 0)))
	);

	auto moon_MeanOrbit = earth_MeanEquator->make_next_node(
		relatively_phase::dirct(make_quaternion(56.5 * ( pi / 180. ), vec3(0, 0, 1)) * make_quaternion(18. * ( pi / 180. ), vec3(1, 0, 0)))
	);

	auto earthmoon_CenterPoint = absolute_phase::point::make_node(
		SSB,
		relatively_phase::point(
			vec3(0.980614658546613 * cos(ct / 12.) + 0.19578828907141047 * sin(ct / 12.), -0.19594614424251772 * cos(ct / 12.) + 0.979824670586842 * sin(ct / 12.), 0.04013179253255973 * sin(ct / 12.)),
			vec3(0.016315690755950872 * cos(ct / 12.) - 0.08171788821221775 * sin(ct / 12.), 0.08165205588223683 * cos(ct / 12.) + 0.01632884535354314 * sin(ct / 12.), 0.0033443160443799775 * cos(ct / 12.)),
			vec3(-0.006809824017684812 * cos(ct / 12.) - 0.0013596408963292392 * sin(ct / 12.), 0.001360737112795262 * cos(ct / 12.) - 0.006804337990186402 * sin(ct / 12.), -0.00027869300369833146 * sin(ct / 12.))
		)
	);

	auto moon_CenterPoint = earthmoon_CenterPoint->make_next_node(
		{
			moon_MeanOrbit,
			relatively_phase::point(
				vec3(0.5 * cos(ct + 12. * ( pi / 180. )), 0.5 * sin(ct + 12. * ( pi / 180. )), 0.),
				vec3(-0.5 * sin(ct + 12. * ( pi / 180. )), 0.5 * cos(ct + 12. * ( pi / 180. )), 0.),
				vec3(-0.5 * cos(ct + 12. * ( pi / 180. )), -0.5 * sin(ct + 12. * ( pi / 180. )), 0.)
			)
		}
	);

	auto tmp_point = earthmoon_CenterPoint->make_next_node(
		{
			moon_MeanOrbit,
			relatively_phase::point(
				vec3(-0.1 * cos(ct + 12. * ( pi / 180. )), -0.1 * sin(ct + 12. * ( pi / 180. )), 0.),
				vec3(0.1 * sin(ct + 12. * ( pi / 180. )), -0.1 * cos(ct + 12. * ( pi / 180. )), 0.),
				vec3(0.1 * cos(ct + 12. * ( pi / 180. )), 0.1 * sin(ct + 12. * ( pi / 180. )), 0.))
		}
	);

	auto tmp_dirct = earth_MeanEquator->make_next_node(
		{
			make_quaternion(( 30. * ct + 5. * cos(ct) ) * 360. * ( pi / 180. ), vec3(0, 0, 1)),
			360. * ( pi / 180. ) * ( 30. - 5. * sin(ct) ) * vec3(0, 0, 1),
			-1800. * ( pi / 180. ) * cos(ct) * vec3(0, 0, 1)
		}
	);

	auto earth_FixBody = absolute_phase::frame::make_node(tmp_dirct, tmp_point);

	double phi = 35 * ( pi / 180 );
	double lambda = 45 * ( pi / 180 );

	auto localstation_ENT = absolute_phase::frame::make_node(
		earth_FixBody,
		relatively_phase::frame(
			relatively_phase::point(vec3(0.11 * cos(phi) * cos(lambda), 0.11 * cos(phi) * sin(lambda), 0.11 * sin(phi))),
			relatively_phase::dirct(make_quaternion(lambda, { 0,0,1 }) * make_quaternion(-phi, { 0,1,0 }) * make_quaternion(half_pi, { 0,1,0 }) * make_quaternion(half_pi, { 0,0,1 }))
		)
	);


	auto satt = absolute_phase::point::make_node(
		earthmoon_CenterPoint,
		{
			SSB,
			relatively_phase::point(
				vec3(0.25 * cos(345600. * ct * ( pi / 180. )), 0.25 * sin(345600. * ct * ( pi / 180. )), 0),
				vec3(-1507.96 * sin(345600. * ct * ( pi / 180. )), 1507.96 * cos(345600. * ct * ( pi / 180. )), 0.),
				vec3(-9.09583e6 * cos(345600. * ct * ( pi / 180. )), -9.09583e6 * sin(345600. * ct * ( pi / 180. )), 0.)
			)

		}
	);

	cout << earthmoon_CenterPoint->different_from(absolute_phase::frame::root()).posvelacc().transpose() << endl;
	cout << earth_FixBody->point_diff_from(earthmoon_CenterPoint).reduce_under(SSB).posvelacc().transpose() << endl;
	auto ussb = earth_FixBody->different_from(SSB);
	cout << ussb.posvelacc().transpose() << endl;
	cout << localstation_ENT->different_from(SSB).posvelacc().transpose() << endl;
	cout << satt->different_from(SSB).posvelacc().transpose() << endl;
	cout << satt->different_from(localstation_ENT).posvelacc().transpose() << endl;
	cout << "\n" << endl;
	cout << satt->distanceTo(localstation_ENT) << endl;
	cout << "\n" << endl;
}

int main(void) {
#ifdef _DEBUG
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
#endif // _DEBUG
	size_t col;

	tuple<value_t, value_t, value_t> ref_datas[] =
	{ {0,0.,6778000.000000000000000000000000},{60,0.06904325287544172470051935885874,6778539.406694782753718748911331},{120,0.13806455266314258698180298199313,6780154.8858185800000577107798144},{180,0.2070420890297802675775408694611,6782838.235983829756789325714072},{240,0.27595433538760330738900910149567,6786575.8595219254994693914946345},{300,0.3447801864010342089089399864435,6791348.868281554824793034202037},{360,0.4134990903697956990988226281563,6797133.229445083892385775616720},{420,0.4820911749692124852815618991055,6803899.949139228146924700180884},{480,0.5505373649806226497023970484704,6811615.291087338540837185076741},{540,0.6188194908243036206434853818444,6820241.027097055834117204133571},{600,0.6869203869074562708633820411183,6829734.715805494244261598311433},{660,0.7548239790137183543087241719420,6840050.005822749623593035439350},{720,0.8225153601816193133788255389654,6851136.959229279474242137084494},{780,0.8899808547400747014089533916227,6862942.391286776527929242365582},{840,0.9572080703832223331979912656725,6875410.222216022774652092847749},{900,1.0241859383697192754434693943627,6888481.836980285566824307605617},{960,1.0909047421163548936170366767470,6902096.449158748522996710063067},{1020,1.1573561346214300301342142380814,6916191.465222255066490128692753},{1080,1.2235331452946129383351691309235,6930702.845793377753619143584886},{1140,1.2894301768865938644543067629286,6945565.460788742672997757869320},{1200,1.3550429933036648918003346700158,6960713.435693128459480439706694},{1260,1.4203686991575292385567169018114,6976080.486574375374012635558315},{1320,1.4854057119431836466261241833657,6991600.241828016502128875939108},{1380,1.5501537277567184398373894937544,7007206.549010551186975202793498},{1440,1.6146136814638328777434110047697,7022833.765482850032933306355896},{1500,1.6787877022114924700323714862130,7038417.0319334003830957920001478},{1560,1.7426790651409141832099165675719,7053892.528172057710780400592727},{1620,1.8062921401139704853488154706999,7069197.710882258742755932363706},{1680,1.8696323382091886808351411258880,7084271.533286037548412303247195},{1740,1.9327060566803682595804779796664,7099054.646910395007863960403502},{1800,1.9955206230030537613512552807525,7113489.585846121867301944881967},{1860,2.0580842385634919770846233151559,7127520.934059810727263802107250},{1920,2.1204059224734319915378005010296,7141095.476459001708805024963905},{1980,2.1824954559232729692859128347859,7154162.334518631721941585330842},{2040,2.2443633274176661407775261104090,7166673.087359488645684474035633},{2100,2.3060206791715487443960284638854,7178581.879223461366916876177633},{2160,2.3674792548829827899482903448960,7189845.514324752633920356227485},{2220,2.4287513490410969216513254990874,7200423.540067081763674314034696},{2280,2.4898497578744274419009884529205,7210278.319611705746073724609739},{2340,2.5507877319964400256778743743682,7219375.094759164198739480168654},{2400,2.6115789307613507364905686361331,7227682.040072603955015132078480},{2460,2.6722373783045731995289934324391,7235170.309124977905499835324983},{2520,2.7327774212070736862339418270284,7241814.073693655875767440001704},{2580,2.7932136876941533524723971486952,7247590.556668735851482603043491},{2640,2.8535610482514120681327346218542,7252480.059363236022786351362682},{2700,2.9138345775198510139297550896175,7256465.983844898385820776559928},{2760,2.9740495173130081792370911601254,7259534.850829815828586709643536},{2820,3.0342212405830435456012997709329,7261676.313591261039899465734770},{2880,3.0943652161514029526595328875817,7262883.168261139197682010261260},{2940,-3.1286883331703444730014559156454,7263151.360809172023534533859408},{3000,-3.0685532361931502627312405960684,7262479.990899912571265634768411},{3060,-3.0083992505960102604542324036794,7260871.312743697932999778542398},{3120,-2.9482108684202289093393051671063,7258330.732963349929804203850197},{3180,-2.887972657713181722064616316997,7254866.805415740387756688042102},{3240,-2.8276692974481474946599336222709,7250491.222816733230531657027846},{3300,-2.7672856130984695207170891608642,7245218.804931534363675663150934},{3360,-2.7068066130567537239968956926373,7239067.483006046078170697441674},{3420,-2.6462175260790592424863777154050,7232058.280029537437426679706899},{3480,-2.585503839920489255156123645740,7224215.286336298439472991512782},{3540,-2.524651341311779391455849295695,7215565.629973034856445461849977},{3600,-2.463646157406330813962453169554,7206139.441181662342990337506795},{3660,-2.402474798803374650415666570683,7195969.81027453969041189250393},{3720,-2.341124204225112825037371441877,7185092.73811140543591318941487},{3780,-2.2795817868940162447418397015622,7173547.078327939246629053089768},{3840,-2.2178354826197816855909902029937,7161374.470412497017387756101307},{3900,-2.1558737995647428480910091603974,7148619.262686915407706745310332},{3960,-2.093685869610704523990511268927,7135328.424217251135613633213175},{4020,-2.031261501199702496616513075505,7121551.444665220312367945751754},{4080,-1.968591233466037000681045192007,7107340.221092720412304064029233},{4140,-1.905666391417278666526349842912,7092748.930752433290358977051202},{4200,-1.8424791418582619653565579036722,7077833.888939806691226434533681},{4260,-1.779022549684948089671174959808,7062653.391048018094418544005439},{4320,-1.715290634105356754403353668819,7047267.538060408351632743374676},{4380,-1.6512784242737216934554378970769,7031738.044836917873279637930835},{4440,-1.5869820137526311718603054801832,7016128.0307022359305110491059783},{4500,-1.522398613148371752136621846918,7000501.792027440957969402850485},{4560,-1.4575266001988205523201333053875,6984924.556714198408254699853963},{4620,-1.3923655665324169370455178321776,6969462.220736260649491071819167},{4680,-1.326916360265172180935033530107,6954181.067175284457433889060439},{4740,-1.2611811235610891884917712979256,6939147.468494614380755437531868},{4800,-1.195163324253744542478944615490,6924427.573128769482759173180806},{4860,-1.128867780615338783729104368971,6910086.97782029426463769011303},{4920,-1.0623006783670047893476394414979,6896190.387503845956755991812597},{4980,-0.9954695790528903230059298173468,6882801.264911730840910865252673},{5040,-0.928383418952597288332275669129,6869981.472447424920182431530875},{5100,-0.8610524977832431119255985490464,6857790.909232419541341847795570},{5160,-0.793488456544604360062703489270,6846287.14656697001022186478216},{5220,-0.725704243988466149489544685969,6835525.065346357805376647315979},{5280,-0.6577140713449363841852029355553,6825556.499223789363794058394950},{5340,-0.589533355112830431197020069345,6816429.88750649184994043781027},{5400,-0.521178647914470195950051211214,6808189.941895768523574731490708},{5460,-0.4526675576230582821564579858269,6800877.331221292377515759472896},{5520,-0.384018655188996078285927454078,6794528.38828216173622748909686},{5580,-0.315251371813021193184129910867,6789174.842773119468290864939482},{5640,-0.246385886332547540700104339370,6784843.584041293900740801398098},{5700,-0.1774430038968457943206037931789,6781556.457106204718634168390577},{5760,-0.108444027198553600594716563381,6779330.094963250811401989481146},{5820,-0.0394106216975957591570756143131,6778175.789703890488641807588232} };

	planeKepler obt1(3.986004418e14, vec2(6378000 + 400000, 0), vec2(0, 7800));
	planeKepler obt2(obt1.H, 1, obt1.mu);

	cout << obt2.v_by_r(obt2.r(0.)) << endl;
	cout << fixed << obt2.r_vec3(0.).transpose() << endl;

	cout << obt1.r_min() << endl;
	cout << obt1.r_max() << endl;
	cout << obt1.T() << endl;
	cout << obt1.n() << endl;
	cout << constants::two_pi / obt1.n() << endl;

	col = 0;
	for ( const auto &[t, theta, r] : ref_datas ) {
		//cout << right << setw(10) << scientific << setprecision(3) << obt1.r(theta) - r << "    ";
		cout << right << setw(10) << fixed << setprecision(3) << obt1.t(theta) -t  << "    ";
		if ( ++col % 10 == 0 )
			cout << endl;
	}

	return 0;



	using namespace boost::math::long_double_constants;

	//auto target = object::cspice_point("2003451");
	//auto now_tpr = timesystem::TAI::make_node(chrono::system_clock::now());
	//auto s = target(now_tpr);
	//cout << fixed << setprecision(32) << now_tpr->seconds() << endl;
	//cout << fixed << setprecision(32) << now_tpr->toTDB().seconds() << endl;
	//cout << fixed << setprecision(32) << now_tpr->toTDB().JulianDate() << endl;
	//cout << scientific << right << setprecision(15) << setw(25) << s.get_pointptr()->different_from(absolute_phase::frame::root()).posvelacc() << endl;
	//return 0;

	SpiceDouble et;
	SpiceDouble lt;
	SpiceDouble posvel[6];
	SpiceDouble xform[6][6];

	/**
	et = timesystem::TAI(chrono::system_clock::now()).toTDB().seconds();
	cout << "TDB: " << fixed << setprecision(9) << timesystem::TDB(et).JulianDate() << "\n\t";

	sxform_c("IAU_MARS", "J2000", et, xform);

	Matrix < SpiceDouble, 6, 6> eigen_xform(&xform[0][0]);
	cout << eigen_xform << endl;

	return 0;
	/**/

	constexpr size_t max_name_len = 256;
	SpiceChar name[max_name_len];
	SpiceBoolean found;
	SpiceInt code;

	cout << "FRAMES:" << endl;
	for ( code = 0, col = 0; code < 100000; ++code ) {
		frmnam_c(code, max_name_len, name);
		if ( !iswhsp_c(name) ) {
			cout << right << setw(6) << code << ": " << left << setw(25) << name << "    \t";
			if ( ( ++col ) % 5 == 0 )
				cout << endl;
		}
	}
	cout << "\n\n" << endl;

	for ( code = 0, col = 0; code < 10000000; ++code ) {
		bodc2n_c(code, max_name_len, name, &found);
		if ( found ) {
			cout << right << setw(6) << code << ": " << left << setw(25) << name << "    \t";
			if ( ( ++col ) % 5 == 0 )
				cout << endl;
		}
	}
	return 0;

	code = 2000029;
	bodc2s_c(code, max_name_len, name);
	cout << "\ncode: " << code << "\tname: " << name << "\n" << endl;
	et = timesystem::TAI(chrono::system_clock::now()).toTDB().seconds();

	for ( size_t i = 0; i < 10; ++i, et += 3600. ) {
		spkez_c(code, et, "ECLIPJ2000", "NONE", 0, posvel, &lt);
		cout << "TDB: " << fixed << setprecision(9) << timesystem::TDB(et).JulianDate() << "\n\t";
		cout << scientific << right << setprecision(15) << setw(25) << posvel[0] << "\t";
		cout << scientific << right << setprecision(15) << setw(25) << posvel[1] << "\t";
		cout << scientific << right << setprecision(15) << setw(25) << posvel[2] << "\n\t";
		cout << scientific << right << setprecision(15) << setw(25) << posvel[3] << "\t";
		cout << scientific << right << setprecision(15) << setw(25) << posvel[4] << "\t";
		cout << scientific << right << setprecision(15) << setw(25) << posvel[5] << "\n";
		cout << "\n" << endl;
	}

	//for ( size_t i = 0; i < 10000000; ++i ) {
	//	code = i;
	//	bodc2n_c(code, max_name_len, name, &found);
	//	if ( found )
	//		cout << code << "\t" << name << endl;
	//}

	//bods2c_c("IAU_EARTH", &code, &found);
	//cout << code << endl;

	return 0;
	/**
	auto s = std::chrono::high_resolution_clock::now();
	size_t c = 0;
	value_t err = 0;
	value_t err_sum = 0;
	value_t max_E = 0;
	value_t max_e = 0;
	boost::uintmax_t mit = 0;
	value_t it_sum = 0;
	value_t maxit_E = 0;
	value_t maxit_e = 0;
	for ( value_t e = 0; e < 1; e += 0.00025 ) {
		for ( value_t i = -5; i <= 5; i += 0.0005 ) {
			auto er = abs(mean2elliptic(i - e * sin(i), e) - i);
			if ( er > err )err = er, max_E = i, max_e = e;
			if ( it > mit )mit = it, maxit_E = i, maxit_e = e;
			err_sum += er;
			it_sum += it;
			++c;
		}
	}
	auto e = std::chrono::high_resolution_clock::now();
	std::cout << std::fixed << std::setprecision(26);
	std::cout << err << std::endl;
	std::cout << max_E << std::endl;
	std::cout << max_e << std::endl;
	std::cout << err_sum / c << std::endl;
	std::cout << std::endl;
	std::cout << mit << std::endl;
	std::cout << maxit_E << std::endl;
	std::cout << maxit_e << std::endl;
	std::cout << it_sum / c << std::endl;
	std::cout << std::endl;
	std::cout << c << std::endl;
	std::cout << std::chrono::duration_cast<std::chrono::nanoseconds>( e - s ).count() / c << std::endl;
	/**/
}


